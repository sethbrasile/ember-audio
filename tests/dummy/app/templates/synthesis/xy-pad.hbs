<div class="content">
  <h2>XY Pad</h2>

  <XyPad @padSize={{this.padSize}} @updateCoordinates={{this.adjustSynthParams}} @activate={{this.play}} @deactivate={{this.stop}} />

  <p>Frequency: {{this.frequency}}</p>
  <p>Gain: {{this.gain}}</p>
  <p>padsize: {{this.padSize}}</p>
</div>

<p>Template</p>

<CodeBlock @language="handlebars">
  {{'
    <XyPad
      @padSize={{this.padSize}}
      @updateCoordinates={{action "adjustSynthParams" }}
      @activate={{action "play" }}
      @deactivate={{action "stop" }} />

    <p>Frequency: {{frequency}}</p>
    <p>Gain: {{gain}}</p>
  '}}
</CodeBlock>

<p>Controller</p>

<CodeBlock @language="javascript">
  import Ember from 'ember';
  import { exponentialRatio } from 'ember-audio/utils';

  export default Ember.Controller.extend({
    audio: Ember.inject.service(),
    oscillator: null,
    padSize: 300,
    range: { min: 100, max: 400 },

    initOscillator: Ember.on('init', function() {
      const oscillator = this.get('audio').createOscillator({ type: 'square' });
      this.set('oscillator', oscillator);
    }),

    frequency: Ember.computed('oscillator.frequency', function() {
      const frequency = this.get('oscillator.frequency');

      if (frequency) {
        return frequency.toFixed();
      }
    }),

    gain: Ember.computed('oscillator.gain', function() {
      const gain = this.get('oscillator.gain');

      if (gain) {
        return gain.toFixed(2);
      } else {
        return 0;
      }
    }),

    _getFrequency(x) {
      const range = this.get('range');
      const padSize = this.get('padSize');

      return range.min + (range.max - range.min) * (x / padSize);
    },

    _getGain(y) {
      // Human senses are not linear.
      // http://stackoverflow.com/questions/1165026/what-algorithms-could-i-use-for-audio-volume-level
      return exponentialRatio(y / this.get('padSize'));
    },

    actions: {
      play() {
        this.get('oscillator').play();
      },

      stop() {
        const oscillator = this.get('oscillator');

        if (oscillator.get('isPlaying')) {
          oscillator.stop();
        }
      },

      adjustSynthParams(x, y) {
        const oscillator = this.get('oscillator');
        const frequency = this._getFrequency(x);
        const gain = this._getGain(y);

        oscillator.update('frequency', frequency);
        oscillator.update('gain', gain);
      }
    }
  });
</CodeBlock>

<p>
  <code>xy-pad</code> component template
</p>

<CodeBlock @language="handlebars">
  {{'
    <canvas
      width={{padSize}}
      height={{padSize}}
      style="background-color: black;"

      onmousedown={{action "activate"}}
      onmousemove={{action "updateCoordinates"}}
      onmouseleave={{action "deactivate"}}
      onmouseup={{action "deactivate"}}

      ontouchstart={{action "activate"}}
      ontouchmove={{action "updateCoordinates"}}
      ontouchend={{action "deactivate"}}
      ontouchcancel={{action "deactivate"}}
    ></canvas>
  '}}
</CodeBlock>

<p>
  <code>xy-pad</code> component javascript
</p>

<CodeBlock @language="javascript">
  // leaving out the code to draw the grid/text
  export default Ember.Component.extend({
    actions: {
      activate(e) {
        e.preventDefault();
        this.send('updateCoordinates', e);
        this.sendAction('activate');
      },

      deactivate(e) {
        this.sendAction('deactivate');
      },

      updateCoordinates(e) {
        e.preventDefault();

        const [ canvas ] = this.element.childNodes;
        const canvasLocation = canvas.getBoundingClientRect();
        const xRelToScreen = e.x || e.touches[0].screenX;
        const yRelToScreen = e.y || e.touches[0].screenY;
        const x = xRelToScreen - canvasLocation.left;

        // 'y' is measured from top, so invert for value from bottom
        const y = this.get('padSize') + (yRelToScreen - canvasLocation.top) * -1;

        this.sendAction('updateCoordinates', x, y);
      }
    }
  });
</CodeBlock>
