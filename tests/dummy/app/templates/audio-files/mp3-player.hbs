<div class="content">
  <h2>MP3 Player Example</h2>

  <div class="track-list well clearfix">
    <div class="col-sm-3">
      <table class="table table-bordered">
        <tbody>
          {{#each this.tracks as |track|}}
            <tr role="button" class="{{if (eq track this.selectedTrack) "info"}} item" {{on "click" (fn this.selectTrack track)}}>
              <td>{{undasherize track.name}}</td>
            </tr>
          {{/each}}
        </tbody>
      </table>
    </div>

    <div class="description col-sm-9">
      {{#if this.selectedTrack}}
        <p>{{this.selectedTrack.description}}</p>
      {{else}}
        <p>Select a Track...</p>
      {{/if}}
    </div>
  </div>

  <Mp3Player @track={{this.selectedTrack.trackInstance}} @loading={{this.trackIsLoading}} />
</div>

<div class="content">
  <p class="note">
    Note: Purely aesthetic stuff has been removed. See repo for full code.
  </p>

  <h4>Template</h4>

  <CodeBlock @language="handlebars">
  {{'
    <div class="track-list">
      <div class="select">
        <table>
          {{#each tracks as |track|}}
            <tbody>
              <tr {{action "selectTrack" track}}>
                <td>{{track.name}}</td>
              </tr>
            </tbody>
          {{/each}}
        </table>
      </div>

      <div class="description">
        {{#if selectedTrack}}
          <p>{{selectedTrack.description}}</p>
        {{else}}
          <p>Select a Track...</p>
        {{/if}}
      </div>
    </div>

    {{!-- mp3-player accepts a Track instance, and a loading boolean --}}
    {{mp3-player track=selectedTrack.trackInstance loading=trackIsLoading}}
  '}}
  </CodeBlock>
</div>

<div class="content">
  <h4>Controller</h4>

  <CodeBlock @language="javascript">
  audio: Ember.inject.service(),
  trackIsLoading: false,
  selectedTrack: null,

  // "barely-there.mp3" and "do-wah-diddy.mp3" are mp3 files located in this project's public folder
  tracks: [
    {
      name: 'barely-there',
      trackInstance: null, // After it's loaded, we will place the audio data here
      description: `description here...`
    },
    {
      name: 'do-wah-diddy',
      trackInstance: null,
      description: `description here...`
    }
  ],

  actions: {
    selectTrack(track) {
      const audio = this.get('audio');

      this.set('selectedTrack', track);
      this.set('trackIsLoading', true);

      // Pause any playing track so that user can't play multiple tracks at once
      audio.pauseAll();

      // We use ".asTrack('some-name')" to name the sound, and to specify that we want a "Track" instance
      audio.load(`${track.name}.mp3`).asTrack(track.name).then((trackInstance) => {
        this.set('selectedTrack.trackInstance', trackInstance);
        this.set('trackIsLoading', false);
      });
    }
  }
  </CodeBlock>
</div>

<div class="content">
  <h4><code>mp3-player</code> Component Template</h4>

  <CodeBlock @language="handlebars">
  {{'
    {{#if loading}}
      {{!-- some loading display --}}
    {{else if track}}
      <div class="audioplayer">
        <div class="play-pause {{if track.isPlaying "playing"}}" {{action "togglePlay"}}><a></a></div>

        {{!-- track.position and track.duration output a few different formats
          as a POJO. We are interested in the "string" variant --}}
        <div class="time current">{{track.position.string}}</div>

        {{!-- An action bound to "onclick" is passed a javascript native "MouseEvent" object --}}
        <div class="bar" onclick={{action "seek"}}>
          <div style="width: 100%;"></div>
          <div class="played" style={{percentPlayed}}></div>
        </div>

        <div class="time duration">{{track.duration.string}}</div>

        <div class="volume" onclick={{action "changeVolume"}}>
          <div class="button"><a></a></div>

          <div class="adjust">
            <div>
              <div style={{percentGain}}></div>
            </div>
          </div>
        </div>
      </div>
    {{/if}}
  '}}
  </CodeBlock>
</div>

<div class="content">
  <h4><code>mp3-player</code> Component Javascript</h4>

  <p class="note">
    Note that the exact measurements below will not apply to you unless your
    markup is identical; however, the concepts are universal.
    <code>newPosition</code> and <code>newGain</code> could be calculated much
    more easily using <code>range</code> inputs.
  </p>

  <CodeBlock @language="javascript">
  percentPlayed: Ember.computed('track.percentPlayed', function() {
    const percentPlayed = this.get('track.percentPlayed');
    return Ember.String.htmlSafe(`width: ${percentPlayed}%;`);
  }),

  percentGain: Ember.computed('track.percentGain', function() {
    const percentGain = this.get('track.percentGain');
    return Ember.String.htmlSafe(`height: ${percentGain}%;`);
  }),

  actions: {
    togglePlay() {
      const track = this.get('track');

      if (track.get('isPlaying')) {
        track.pause();
      } else {
        track.play()
      }
    },

    // "e" is a javascript native "MouseEvent" object
    seek(e) {
      // Get width of clicked element's parent
      const width = e.target.offsetParent.offsetWidth;

      // Divide click position by parent width
      const newPosition = e.offsetX / width;

      // Set new position based on ratio
      this.get('track').seek(newPosition).from('ratio');
    },

    changeVolume(e) {
      // Get height of clicked element's parent
      const height = e.target.offsetParent.offsetHeight;

      // Get click position
      const offset = e.pageY - Ember.$(e.target).parent().offset().top;

      // Adjust height because height of element is 80% of parent's
      const adjustedHeight = height * 0.8;

      // Adjust click position because height of element is 80% of parent's,
      // and element is centered vertically
      const adjustedOffset = offset - ((height - adjustedHeight) / 2);
      const newGain = adjustedOffset / adjustedHeight;

      // Set new gain based on inverse ratio because Y coordinate is measured
      // from the top, but we want gain to be measured from the bottom
      this.get('track').changeGainTo(newGain).from('inverseRatio');
    }
  }
  </CodeBlock>
</div>
