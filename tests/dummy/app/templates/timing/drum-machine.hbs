<div class="content">
  <h2>Multisampled Drum Machine</h2>

  <p>
    Below is an example of a drum machine that loads up three samples for each
    lane and allows you to program a drum beat. The sample is automatically
    alternated so you never hear the same sample back-to-back.
  </p>

  {{#if this.isLoading}}
    <div class="spinner">
      <div class="rect1"></div>
      <div class="rect2"></div>
      <div class="rect3"></div>
      <div class="rect4"></div>
      <div class="rect5"></div>
    </div>
  {{else}}
    <div class="controls">
      <button class="btn btn-primary" type="button" {{action "play"}}>PLAY</button>

      <div>
        <label>Tempo <Input @value={{this.bpm}} /></label>
      </div>
    </div>

    <div class="beat-machine">
      {{#each this.beatTracks as |beatTrack|}}
        <div class="beat-lane">
          <p class="text">{{beatTrack.name}}</p>

          {{#each beatTrack.beats as |beat|}}
            <div role="button" class="beat-pad" {{action "toggleActive" beat}}>
              <span class="pad {{if beat.active "active"}} {{if beat.isPlaying "playing"}} {{if beat.currentTimeIsPlaying "highlighted"}}"></span>
            </div>
          {{/each}}
        </div>
      {{/each}}
    </div>
  {{/if}}
</div>

<div class="content">
  <p>
    This is a really great example of how performant the Web Audio API is. Try
    turning the tempo up to something ridiculous like 1200. If you hear any
    audio artifacts ("glitches"), know that they are not caused by your
    pc/browser, but by an acoustic property called "phase cancellation" and it's
    happening because at that high a tempo, the same sample ends up played over
    itself at a slightly different time.
  </p>

  <p>
    Let's take it a "few" steps further. How about some eighth notes at 1
    million BPM?

    <br>

    <button class="btn btn-danger" type="button" {{action "engageLudicrousMode"}}>
      Engage Ludicrous Mode
    </button>
  </p>

  <p>
    "Clicks and pops" is what we should hear if our audio hardware can't keep
    up and "stutters" is what we should hear if our browsers can't keep up. Do
    you hear either of those? I don't. That's how awesome the Web Audio
    API is. It's truly letting us tap in to the host machine's audio hardware.
  </p>
</div>

<div class="content">
  <CodeBlock @language="handlebars">
  &#123;{#if isLoading}}
    &#123;{!-- Some loading indicator... --}}
  &#123;{else}}
    &lt;div class="controls">
      &lt;button class="btn btn-primary" &#123;{action "play"}}>PLAY&lt;/button>

      &lt;div>
        &lt;label>Tempo &#123;{input value=bpm}}&lt;/label>
      &lt;/div>
    &lt;/div>

    &lt;div class="beat-machine">
      &#123;{#each beatTracks as |beatTrack|}}
        &lt;div class="beat-lane">
          &lt;p class="text">&#123;{beatTrack.name}}&lt;/p>

          &#123;{#each beatTrack.beats as |beat|}}
            &lt;div class="beat-pad" &#123;{action "toggleActive" beat}}>
              &lt;span class="pad &#123;{if beat.active "active"}} &#123;{if beat.isPlaying "playing"}} &#123;{if beat.currentTimeIsPlaying "highlighted"}}">&lt;/span>
            &lt;/div>
          &#123;{/each}}
        &lt;/div>
      &#123;{/each}}
    &lt;/div>
  &#123;{/if}}
  </CodeBlock>

  <CodeBlock @language="javascript">
  export default Ember.Whatever.extend({
    audio: Ember.inject.service(),
    beatTracks: null,
    isLoading: true,
    bpm: 120,

    initBeats: Ember.on('init', function() {
      Ember.RSVP.all([
        this._loadBeatTrackFor('kick'),
        this._loadBeatTrackFor('snare'),
        this._loadBeatTrackFor('hihat')
      ])
      .then((beatTracks) => {
        beatTracks.map((beatTrack) => {
          const name = beatTrack.get('name');

          // default is 4 beats, but we're going to use 16
          beatTrack.set('numBeats', 16);

          // snare and hihat are a little louder than kick, so we'll turn down the gain
          if (name === 'snare' || name === 'hihat') {
            beatTrack.set('gain', 0.5);
          }

          // and let's pan the hihat a little to the left
          if (name === 'hihat') {
            beatTrack.set('pan', -0.4);
          }
        });

        this.set('isLoading', false);
        this.set('beatTracks', beatTracks);
      });
    }),

    _loadBeatTrackFor(name) {
      // 'snare1.wav', 'kick2.wav', etc..., from this project's public folder
      const sounds = [`${name}1.wav`, `${name}2.wav`, `${name}3.wav`];

      // If name === 'kick', this creates a BeatTrack instance called
      // 'kick' that contains the sounds 'kick1', 'kick2', and 'kick3'
      return this.get('audio').load(sounds).asBeatTrack(name);
    },

    actions: {
      play() {
        this.get('beatTracks').map((beatTrack) => {
          // playActiveBeats() optionally accepts "noteType" which defaults to "1/4"
          // notes, but we want to use eighth notes
          beatTrack.playActiveBeats(this.get('bpm'), 1/8);

          // /* playActiveBeats() is a convenience method. For more control, you could do:
          // http://bradthemad.org/guitar/tempo_explanation.php */
          // const eighthNoteDuration = (240 * 1/8) / this.get('bpm');
          // beatTrack.get('beats').map((beat, beatIndex) => {
          //   /* whatever else you need to do */
          //   beat.ifActivePlayIn(beatIndex * eighthNoteDuration);
          // });
        });
      },

      toggleActive(beat) {
        if (beat.get('active')) {
          beat.set('active', false);
        } else {
          beat.play();
          beat.set('active', true);
        }
      }
    }
  });
  </CodeBlock>
</div>

<div class="content">
  <h3>Drum Samples Credits:</h3>

  <p>
    The hihats are from the "Erkans Samples" pack downloaded from the
    <a href="http://www.ultimatemetal.com/forum/forums/andy-sneap-foh/">Andy Sneap</a>
    section of the
    <a href="http://www.ultimatemetal.com/forum/">Ultimate Metal Forum</a>.
    Recorded by Erkan Dogantimur.
  </p>

  <p>
    The snare and kick are from the "ALTQQ Drum Pack" also downloaded from the
    <a href="http://www.ultimatemetal.com/forum/forums/andy-sneap-foh/">Andy Sneap</a>
    section of the
    <a href="http://www.ultimatemetal.com/forum/">Ultimate Metal Forum</a>.
    Recorded by Fabian Prezja of Prezja Productions.
  </p>
</div>
